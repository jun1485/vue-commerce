name: Vue Commerce CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_NAME: vue-commerce
  NODE_VERSION: "20"

jobs:
  # 1단계: 코드 품질 검사 및 테스트
  quality-check:
    name: 🔍 Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Enable pnpm
        run: corepack enable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm run type-check

      - name: 🧪 Run tests
        run: pnpm run test || echo "No tests configured"

      - name: 📊 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 7

  # 2단계: 빌드
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Enable pnpm
        run: corepack enable

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: |
          echo "프로덕션 빌드 시작..."
          pnpm run build

          echo "빌드 결과 확인:"
          ls -la dist/

          echo "빌드된 파일 크기:"
          du -sh dist/

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  # 3단계: Docker 이미지 빌드
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        run: |
          echo "Docker 이미지 빌드 중..."
          docker build -t ${{ env.PROJECT_NAME }}:${{ github.sha }} --target production-stage .
          docker tag ${{ env.PROJECT_NAME }}:${{ github.sha }} ${{ env.PROJECT_NAME }}:latest

          echo "빌드된 Docker 이미지:"
          docker images | grep ${{ env.PROJECT_NAME }}

      - name: 🔧 Test Docker image
        run: |
          echo "Docker 이미지 테스트 중..."
          docker run -d --name test-container -p 3001:3000 ${{ env.PROJECT_NAME }}:latest

          echo "컨테이너 상태 확인..."
          sleep 10
          docker ps | grep test-container

          echo "헬스체크..."
          curl -f http://localhost:3001 || echo "헬스체크 실패"

          echo "테스트 컨테이너 정리..."
          docker stop test-container
          docker rm test-container

  # 4단계: 배포 (main 브랜치에서만)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build production image
        run: |
          docker build -t ${{ env.PROJECT_NAME }}:production --target production-stage .

      - name: 🚀 Deploy application
        run: |
          echo "=== 운영 환경에 배포 중 ==="

          # 기존 컨테이너 정리 (실제 환경에서는 무중단 배포 구현)
          docker stop ${{ env.PROJECT_NAME }}-prod || echo "정리할 컨테이너가 없습니다"
          docker rm ${{ env.PROJECT_NAME }}-prod || echo "정리할 컨테이너가 없습니다"

          # 새 컨테이너 배포
          docker run -d \
            --name ${{ env.PROJECT_NAME }}-prod \
            --restart unless-stopped \
            -p 3000:3000 \
            ${{ env.PROJECT_NAME }}:production

          echo "배포 완료! 서비스 상태 확인..."
          sleep 5
          docker ps | grep ${{ env.PROJECT_NAME }}-prod

          echo "애플리케이션 접속: http://localhost:3000"

      - name: 📊 Deployment summary
        run: |
          echo "## 🎉 배포 완료!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 배포 정보" >> $GITHUB_STEP_SUMMARY
          echo "- **프로젝트**: ${{ env.PROJECT_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 링크" >> $GITHUB_STEP_SUMMARY
          echo "- [애플리케이션 접속](http://localhost:3000)" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub 저장소](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY

  # 알림 (선택사항)
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📢 Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ ${{ env.PROJECT_NAME }} 배포가 성공적으로 완료되었습니다!"
          echo "커밋: ${{ github.sha }}"
          echo "브랜치: ${{ github.ref_name }}"

      - name: 📢 Failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ ${{ env.PROJECT_NAME }} 배포가 실패했습니다!"
          echo "커밋: ${{ github.sha }}"
          echo "브랜치: ${{ github.ref_name }}"
          echo "로그를 확인하세요: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
